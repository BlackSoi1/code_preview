{"question_id": 0, "response": "result = a.shape"}
{"question_id": 1, "response": "x = x[~np.isnan(x)]"}
{"question_id": 2, "response": "x[np.isnan(x)] = np.inf"}
{"question_id": 3, "response": "result = [x[i][~np.isnan(x[i])].tolist() for i in range(len(x))]"}
{"question_id": 4, "response": "b = np.zeros((len(a), a.max()+1))\nb[np.arange(len(a)), a] = 1"}
{"question_id": 5, "response": "temp = a - np.min(a)\nb = np.zeros((len(a), np.max(temp)+1))\nb[np.arange(len(a)), temp] = 1"}
{"question_id": 6, "response": "temp = (a - a.min()).ravel()\nb = np.zeros((a.size, temp.max()+1))\nb[np.arange(a.size), temp] = 1"}
{"question_id": 7, "response": "result = np.percentile(a, p)"}
{"question_id": 8, "response": "B = A.reshape(-1, ncol)"}
{"question_id": 9, "response": "B = A.reshape(nrow, -1)"}
{"question_id": 10, "response": "col = (A.shape[0] // ncol) * ncol\nB = A[:col].reshape(-1, ncol)"}
{"question_id": 11, "response": "col = (A.size // ncol) * ncol\nB = A[-col:][::-1]\nB = B.reshape(-1, ncol)"}
{"question_id": 12, "response": "result = np.concatenate([np.full(shift, np.nan), a[:-shift] if shift > 0 else a[abs(shift):]])"}
{"question_id": 13, "response": "result = np.hstack((np.full((a.shape[0], shift), np.nan), a[:, :-shift]))"}
{"question_id": 14, "response": "def solution(a, shift):\n    result = a.copy()\n    for i, n in enumerate(shift):\n        if n > 0:\n            result[i, n:] = result[i, :-n]\n            result[i, :n] = np.nan\n        else:\n            result[i, :n] = result[i, -n:]\n            result[i, n:] = np.nan\n    return result\n\nresult = solution(a, shift)"}
{"question_id": 15, "response": "result = a.argmax()"}
{"question_id": 16, "response": "result = a.argmin()"}
{"question_id": 17, "response": "result = np.unravel_index(a.argmax(), a.shape)"}
{"question_id": 18, "response": "idx = np.unravel_index(a.argmax(), a.shape)\na[idx] = a.min()\nresult = np.unravel_index(a.argmax(), a.shape)"}
{"question_id": 19, "response": "a = a[:, ~np.isnan(a).any(axis=0)]"}
{"question_id": 20, "response": "a = a[~np.isnan(a).any(axis=1)]"}
{"question_id": 21, "response": "result = np.array(a)"}
{"question_id": 22, "response": "result = np.unravel_index(a.argmin(), a.shape)"}
{"question_id": 23, "response": "result = np.unravel_index(a.argmax(), a.shape)"}
{"question_id": 24, "response": "result = np.argwhere(a == a.min())"}
{"question_id": 25, "response": "result = np.sin(np.deg2rad(degree))"}
{"question_id": 26, "response": "result = np.cos(np.deg2rad(degree))"}
{"question_id": 27, "response": "deg = np.sin(np.deg2rad(number))\nrad = np.sin(number)\nresult = int(rad > deg)"}
{"question_id": 28, "response": "result = np.degrees(np.arcsin(value))"}
{"question_id": 29, "response": "a = np.power(a, power)"}
{"question_id": 30, "response": "result = np.power(a, power)\n\nreturn result"}
{"question_id": 31, "response": "gcd = np.gcd(numerator, denominator)\nresult = (numerator//gcd, denominator//gcd)"}
{"question_id": 32, "response": "gcd = np.gcd(numerator, denominator)\nresult = (numerator//gcd, denominator//gcd)\n\nreturn result"}
{"question_id": 33, "response": "if denominator == 0:\n    result = (np.nan, np.nan)\nelse:\n    gcd = np.gcd(numerator, denominator)\n    result = (numerator//gcd, denominator//gcd)"}
{"question_id": 34, "response": "result = np.mean(np.vstack((a, b, c)).T, axis=1)"}
{"question_id": 35, "response": "result = np.maximum.reduce([a, b, c])"}
{"question_id": 36, "response": "dim = min(a.shape)\nb = a[:dim,:dim]\nresult = np.vstack((np.diag(b), np.diag(np.fliplr(b))))"}
{"question_id": 37, "response": "result = X.flatten().tolist()"}
{"question_id": 38, "response": "result = X.flatten().tolist()\nreturn result"}
{"question_id": 39, "response": "result = np.array(list(mystr), dtype=int)"}
{"question_id": 40, "response": "a[:, col-1] *= multiply_number\nresult = np.cumsum(a[:, col-1])"}
{"question_id": 41, "response": "a[row-1, :] *= multiply_number\nresult = np.cumsum(a[row-1, :])"}
{"question_id": 42, "response": "a[row-1, :] /= divide_number\nresult = np.prod(a[row-1, :])"}
{"question_id": 43, "response": "def LI_vecs(M):\n    dim = M.shape[0]\n    LI = [M[0]]\n    for i in range(dim):\n        tmp = []\n        for r in LI:\n            tmp.append(r)\n        tmp.append(M[i])\n        if np.linalg.matrix_rank(np.array(tmp)) > len(LI):\n            LI.append(M[i])\n    return np.array(LI)\n\nresult = LI_vecs(a)"}
{"question_id": 44, "response": "result = a.shape[1]"}
{"question_id": 45, "response": "_, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)"}
{"question_id": 46, "response": "_, p_value = scipy.stats.ttest_ind(a[~np.isnan(a)], b[~np.isnan(b)], equal_var=False)"}
{"question_id": 47, "response": "output = A[~np.isin(A.view([('', A.dtype)]*A.shape[1]).ravel(), B.view([('', B.dtype)]*B.shape[1]).ravel()).reshape(-1, A.shape[1])]"}
{"question_id": 48, "response": "a = np.delete(a, 2, axis=1)"}
{"question_id": 49, "response": "a = np.delete(a, 2, axis=0)"}
{"question_id": 50, "response": "a = a[:, [1,3]]"}
{"question_id": 51, "response": "mask = del_col < a.shape[1]\ndel_col = del_col[mask]\nkeep_col = np.array([i for i in range(a.shape[1]) if i not in del_col])\nresult = a[:, keep_col]"}
{"question_id": 52, "response": "a = np.vstack((a[:pos], element, a[pos:]))"}
{"question_id": 53, "response": "result = array_of_arrays.copy()"}
{"question_id": 54, "response": "result = (a == a[0]).all()"}
{"question_id": 55, "response": "result = np.all(a == a[:, [0]], axis=1).all()"}
{"question_id": 56, "response": "result = np.all(np.all(a == a[0]))\n\nreturn result"}
{"question_id": 57, "response": "def ecdf_result(x):\n    xs = np.sort(x)\n    ys = np.arange(1, len(xs) + 1) / float(len(xs))\n    return ys\n\nresult = ecdf_result(grades)"}
{"question_id": 58, "response": "def ecdf_result(x):\n    xs = np.sort(x)\n    ys = np.arange(1, len(xs)+1)/float(len(xs))\n    return xs, ys\n\nresultx, resulty = ecdf_result(grades)\nresult = np.zeros_like(eval, dtype=float)\nfor i, element in enumerate(eval):\n    if element < resultx[0]:\n        result[i] = 0\n    elif element >= resultx[-1]:\n        result[i] = 1\n    else:\n        result[i] = resulty[(resultx > element).argmax()-1]"}
{"question_id": 59, "response": "def ecdf_result(x):\n    xs = np.sort(x)\n    ys = np.arange(1, len(xs)+1)/float(len(xs))\n    return xs, ys\n\nresultx, resulty = ecdf_result(grades)\nt = (resulty > threshold).argmax()\nlow = resultx[0]\nhigh = resultx[t]"}
{"question_id": 60, "response": "a_tf = np.array(a)"}
{"question_id": 61, "response": "result = np.argsort(a)[::-1][:len(a)]"}
{"question_id": 62, "response": "result = np.argsort(a)"}
{"question_id": 63, "response": "result = np.argsort(a)[-N:][::-1].tolist()"}
{"question_id": 64, "response": "result = np.power(A, n)"}
{"question_id": 65, "response": "result = a.reshape(a.shape[0]//2, 2, a.shape[1]//2, 2).swapaxes(1, 2).transpose(1, 0, 2, 3).reshape(-1, 2, 2)"}
{"question_id": 66, "response": "result = np.lib.stride_tricks.sliding_window_view(a, window_shape=(2,2)).reshape(-1, 2, 2)"}
{"question_id": 67, "response": "result = a[:, low:high]"}
{"question_id": 68, "response": "result = a[low:high]"}
{"question_id": 69, "response": "result = a[:, low:high]"}
{"question_id": 70, "response": "a = np.matrix(string.replace(',', ';'))"}
{"question_id": 71, "response": "result = np.exp(np.random.uniform(low=np.log(min), high=np.log(max), size=n))"}
{"question_id": 72, "response": "B = np.zeros(len(A))\nB[0] = a*A[0]\nfor k in range(1, len(B)):\n    B[k] = a*A[k] + b*B[k-1]"}
{"question_id": 73, "response": "B = np.zeros(len(A))\nB[0] = a*A[0]\nB[1] = a*A[1] + b*B[0]\nfor k in range(2, len(B)):\n    B[k] = a*A[k] + b*B[k-1] + c*B[k-2]"}
{"question_id": 74, "response": "result = np.ravel_multi_index(index, dims=dims, order='F')"}
{"question_id": 75, "response": "result = np.ravel_multi_index(index, dims)"}
{"question_id": 76, "response": "values = np.zeros((2,3))\ndf = pd.DataFrame(data=values, index=index, columns=columns)"}
{"question_id": 77, "response": "result = np.array([np.max(a[index == i]) for i in np.unique(index)])"}
{"question_id": 78, "response": "add = np.max(index)\nmask = index < 0\nindex[mask] += add + 1\nuni = np.unique(index)\nresult = np.zeros(np.amax(index) + 1)\nfor i in uni:\n    result[i] = np.min(a[index == i])"}
{"question_id": 79, "response": "z = np.array(x) + np.array(y)"}
{"question_id": 80, "response": "np.random.seed(42)\nresult = np.array([lista_elegir[i] for i in np.random.choice(len(lista_elegir), size=samples, p=probabilit)])"}
{"question_id": 81, "response": "result = np.pad(a, ((1,0),(1,0)), mode='constant', constant_values=0)[low_index:high_index, low_index:high_index]"}
{"question_id": 82, "response": "result = x[x >= 0]"}
{"question_id": 83, "response": "bin_data_max = np.maximum.reduceat(data, np.arange(0, len(data), bin_size))"}
{"question_id": 84, "response": "new_data = data[::-1]\nbin_data_mean = new_data[:(data.size // bin_size) * bin_size].reshape(-1, bin_size).mean(axis=1)"}
{"question_id": 85, "response": "bin_data_mean = np.flip(np.mean(np.flip(data[:, :(data.shape[1] // bin_size) * bin_size], axis=1).reshape(data.shape[0], -1, bin_size), axis=2), axis=1)"}
{"question_id": 86, "response": "def smoothclamp(x):\n    return np.where(x < x_min, x_min, np.where(x > x_max, x_max, 3*x**2 - 2*x**3))"}
{"question_id": 87, "response": "def smoothclamp(x, x_min=0, x_max=1, N=1):\n    if x < x_min:\n        return x_min\n    if x > x_max:\n        return x_max\n    x = np.clip((x - x_min) / (x_max - x_min), 0, 1)\n    \n    result = 0\n    for n in range(0, N + 1):\n        result += np.math.comb(N + n, n) * np.math.comb(2 * N + 1, N - n) * (-x) ** n\n    \n    result *= x ** (N + 1)\n    return result"}
{"question_id": 88, "response": "result = np.correlate(a, np.concatenate([b[1:], b]), mode='valid')"}
{"question_id": 89, "response": "result = (np.mean(a)-3*np.std(a), np.mean(a)+3*np.std(a))"}
{"question_id": 90, "response": "result = (np.mean(a)-2*np.std(a), np.mean(a)+2*np.std(a))"}
{"question_id": 91, "response": "result = (np.mean(a)-3*np.std(a), np.mean(a)+3*np.std(a))\n\nreturn result"}
{"question_id": 92, "response": "interval = (a.mean()-2*a.std(), a.mean()+2*a.std())\nresult = ~np.logical_and(a>interval[0], a<interval[1])"}
{"question_id": 93, "response": "mdata = DataArray[DataArray >= 0]\nprob = np.percentile(mdata, percentile)"}
{"question_id": 94, "response": "a[zero_rows, :] = 0\na[:, zero_cols] = 0"}
{"question_id": 95, "response": "a[zero_rows, :] = 0\na[:, zero_cols] = 0"}
{"question_id": 96, "response": "a[1, :] = 0\na[:, 0] = 0"}
{"question_id": 97, "response": "mask = a == np.max(a, axis=1)[:, np.newaxis]"}
{"question_id": 98, "response": "mask = a == np.min(a, axis=1)[:, np.newaxis]"}
{"question_id": 99, "response": "result = np.corrcoef(post, distance)[0, 1]"}
{"question_id": 100, "response": "X = np.zeros([Y.shape[1], Y.shape[0]])\nfor i, mat in enumerate(Y):\n    diag = np.sqrt(np.diag(mat))\n    X[:, i] = diag"}
{"question_id": 101, "response": "is_contained = number in a"}
{"question_id": 102, "response": "C = A[~np.isin(A, B)]"}
{"question_id": 103, "response": "C = A[np.isin(A, B)]"}
{"question_id": 104, "response": "C = A[(A > B[0]) & (A < B[1]) | (A > B[1]) & (A < B[2])]"}
{"question_id": 105, "response": "result = len(a) - rankdata(a).astype(int)\n\nreturn result"}
{"question_id": 106, "response": "l1 = np.sum(np.abs(X), axis=1)\nresult = X / l1[:, np.newaxis]"}
{"question_id": 107, "response": "l2 = np.sqrt(np.sum(X*X, axis=1))\nresult = X / l2[:, np.newaxis]"}
{"question_id": 108, "response": "linf = np.max(np.abs(X), axis=1)\nresult = X / linf[:, np.newaxis]"}
{"question_id": 109, "response": "result = np.linalg.norm(a - a[:, None], axis=-1)"}
{"question_id": 110, "response": "result = np.triu(np.linalg.norm(a - a[:, None], axis = -1))"}
{"question_id": 111, "response": "selection = (a != 0) & (a != np.roll(a, 1))\nresult = a[selection]"}
{"question_id": 112, "response": "mask1 = a != 0\nmask2 = np.diff(a, axis=0, prepend=a[0]) != 0\nselection = mask1 & mask2\nresult = a[selection]"}
{"question_id": 113, "response": "df = np.stack([lat, lon, val], axis=2)"}
{"question_id": 114, "response": "df = np.stack([lat, lon, val, np.maximum.reduce([lat, lon, val])], axis=2)"}
{"question_id": 115, "response": "def window(array, shape=(3, 3)):\n    ans = []\n    r_win = np.floor(shape[0] / 2).astype(int)\n    c_win = np.floor(shape[1] / 2).astype(int)\n    x, y = array.shape\n    for i in range(x):\n        xmin = max(0, i - r_win)\n        xmax = min(x, i + r_win + 1)\n        for j in range(y):\n            ymin = max(0, j - c_win)\n            ymax = min(y, j + c_win + 1)\n            ans.append(array[xmin:xmax, ymin:ymax])\n    return ans\n\nresult = window(a, size)"}
{"question_id": 116, "response": "result = np.mean(a)"}
{"question_id": 117, "response": "result = a[-1:]"}
{"question_id": 118, "response": "result = any(np.array_equal(c, x) for x in CNTS)"}
{"question_id": 119, "response": "temp_c = np.nan_to_num(c)\nresult = False\nfor arr in CNTS:\n    temp = np.nan_to_num(arr)\n    result |= (np.array_equal(temp, temp_c) and np.array_equal(np.isnan(c), np.isnan(arr)))"}
{"question_id": 120, "response": "result = np.zeros((len(x_new), a.shape[1]))\nfor col in range(a.shape[1]):\n    f = intp.interp1d(np.arange(len(a)), a[:, col])\n    result[:, col] = f(x_new)"}
{"question_id": 121, "response": "df = pd.DataFrame(data)\nunique_years = np.unique(df['D'])\nresult = []\nfor year in unique_years:\n    mask = df['D'] == year\n    cumsum = np.cumsum(df.loc[mask, 'Q'])\n    result.extend(cumsum)\ndf[name] = result"}
{"question_id": 122, "response": "i = np.diag(i)"}
{"question_id": 123, "response": "result = np.array([np.datetime64(start) + np.timedelta64(i) for i in np.linspace(0, (np.datetime64(end) - np.datetime64(start)), n)])"}
{"question_id": 124, "response": "result = np.where((x == a) & (y == b))[0][0] if np.any((x == a) & (y == b)) else -1"}
{"question_id": 125, "response": "result = np.where((x == a) & (y == b))[0].tolist()"}
{"question_id": 126, "response": "result = np.polyfit(x, y, 2)"}
{"question_id": 127, "response": "df = df.values - a[:, None]"}
{"question_id": 128, "response": "scaler = MinMaxScaler()\na_one_column = a.reshape(-1, 1)\nresult_one_column = scaler.fit_transform(a_one_column)\nresult = result_one_column.reshape(a.shape)"}
{"question_id": 129, "response": "result = np.sum(~np.isin(s1, s2))"}
{"question_id": 130, "response": "def all_equal(iterator):\n    try:\n        iterator = iter(iterator)\n        first = next(iterator)\n        return all(np.array_equal(first, rest) for rest in iterator)\n    except StopIteration:\n        return True\nresult = all_equal(a)"}
{"question_id": 131, "response": "result = True\nfor arr in a:\n    if not np.isnan(arr).any():\n        result = False\n        break"}
{"question_id": 132, "response": "result = np.pad(a, ((0, shape[0]-a.shape[0]), (0, 0)), mode='constant', constant_values=0)"}
{"question_id": 133, "response": "def to_length(a, shape):\n    length_diff = shape[0] - a.shape[0]\n    pad_top = length_diff // 2\n    pad_bottom = length_diff - pad_top\n    return np.pad(a, ((pad_top, pad_bottom), (0, shape[1] - a.shape[1])), mode='constant', constant_values=0)\n\nresult = to_length(a, shape)"}
{"question_id": 134, "response": "a = a.reshape(-1, 3)"}
{"question_id": 135, "response": "result = np.where(((df['a'] > 1) & (df['a'] <= 4)), df['b'], np.nan)"}
{"question_id": 136, "response": "mask = im == 0\nrows = np.flatnonzero((~mask).sum(axis=1))\ncols = np.flatnonzero((~mask).sum(axis=0))\nif rows.shape[0] == 0:\n    result = np.array([])\nelse:\n    result = im[rows.min():rows.max()+1, cols.min():cols.max()+1]"}
{"question_id": 137, "response": "def g(array, List):\n    return array[List]\n\nresult = g(array.copy(), List)"}
{"question_id": 138, "response": "def g(array, List):\n    shuffled = array[List]\n    return np.sum(shuffled[:, -1] != array[:, -1])\n\nresult = g(array.copy(), List)"}
{"question_id": 139, "response": "def g(data):\n    result = data.copy()\n    for col in range(data.shape[1]):\n        unique, counts = np.unique(data[:, col], return_counts=True)\n        count_dict = dict(zip(unique, counts))\n        for i in range(data.shape[0]):\n            if count_dict[data[i, col]] < 3:\n                result[i, col] = 'other'\n    return result\n\nresult = g(data)"}
{"question_id": 140, "response": "mask_keep = data[:, 2] == 'Yes'\n_, idx, counts = np.unique(data[:, 1], return_index=True, return_counts=True)\nmask_first = np.zeros(len(data), dtype=bool)\nmask_first[idx] = True\nresult = data[mask_keep | mask_first]"}
{"question_id": 141, "response": "def g(urls, drop_if_dup):\n    mask_no = drop_if_dup == 'No'\n    _, unique_indices = np.unique(urls, return_index=True)\n    mask_first_occurrence = np.zeros_like(urls, dtype=bool)\n    mask_first_occurrence[unique_indices] = True\n    final_mask = mask_no | mask_first_occurrence\n    return urls[final_mask], drop_if_dup[final_mask]\n\nresult = g(urls, drop_if_dup)"}
{"question_id": 142, "response": "mask_keep = keep_if_dup == 'Yes'\n_, idx = np.unique(urls[::-1], return_index=True)\nmask_last = np.zeros_like(urls, dtype=bool)\nmask_last[-(idx + 1)] = True\nresult = np.where(mask_keep | mask_last)[0]"}
{"question_id": 143, "response": "def g(arr):\n    if arr.shape[1] == 1:\n        if arr.size == 1:\n            return arr[0][0]\n        return arr.squeeze()\n    unique_vals = np.unique(arr[:, 0])\n    d = {}\n    for val in unique_vals:\n        mask = arr[:, 0] == val\n        sub_arr = arr[mask][:, 1:]\n        d[val] = g(sub_arr)\n    return d\n\nresult = g(arr)"}
{"question_id": 144, "response": "datetimes = datetimes.astype('datetime64[s]')"}
{"question_id": 145, "response": "def f(arr=datetime_array):\n    result = arr.astype('datetime64[ns]')\n    return result"}
{"question_id": 146, "response": "datetimes = np.array([datetime.strptime(str(dt), '%Y-%m-%d %H:%M:%S').replace(tzinfo=None) for dt in datetimes])\ndatetimes = np.sort(datetimes)"}
{"question_id": 147, "response": "def g(names, statuses, numbers, messages):\n    messages = np.char.replace(messages, '[', '{')\n    messages = np.char.replace(messages, ']', '}')\n    parsed_messages = np.array([yaml.safe_load(msg) for msg in messages])\n    \n    all_keys = set()\n    for msg in parsed_messages:\n        all_keys.update(msg.keys())\n    \n    result_dict = {\n        'name': names,\n        'status': statuses,\n        'number': numbers\n    }\n    \n    for key in all_keys:\n        values = []\n        for msg in parsed_messages:\n            val = msg.get(key, '')\n            values.append('none' if val == '' else val)\n        result_dict[key] = np.array(values)\n    \n    return result_dict\n\nresult = g(names, statuses, numbers, messages)"}
{"question_id": 148, "response": "for product in products:\n    mask = (product[0] <= product) & (product <= product[1])\n    score[mask] *= 10"}
{"question_id": 149, "response": "mask = np.isin(product, products)\nselected_scores = score[mask]\nMax = np.max(selected_scores)\nMin = np.min(selected_scores)\nscore[mask] = (score[mask] - Min) / (Max - Min)"}
{"question_id": 150, "response": "formatted_dates = np.array([np.datetime_as_string(d, unit='D').astype('datetime64[D]').item().strftime('%d-%b-%Y') for d in dates])"}
{"question_id": 151, "response": "arr = arr[(arr >= List[0]) & (arr <= List[1])]\narr = np.array([datetime.strptime(str(d), '%Y-%m-%d').strftime('%d-%b-%Y %A') for d in arr])"}
{"question_id": 152, "response": "data = np.column_stack((np.roll(data[:, 0], shift=1), data[:, 1]))"}
{"question_id": 153, "response": "data = np.column_stack((np.roll(data[:, 0], shift=-1), data[:, 1]))"}
{"question_id": 154, "response": "data = np.column_stack((np.roll(data[:, 0], shift=1), np.roll(data[:, 1], shift=-1)))"}
{"question_id": 155, "response": "def g(arr):\n    sh = 0\n    min_R2 = 0\n    for i in range(len(arr)):\n        min_R2 += (arr[i,0]-arr[i,1])**2\n    for i in range(len(arr)):\n        R2 = 0\n        for j in range(len(arr)):\n            R2 += (arr[j,0] - arr[j,1]) ** 2\n        if min_R2 > R2:\n            sh = i\n            min_R2 = R2\n        arr[:,0] = np.roll(arr[:,0], shift=1)\n    arr[:,0] = np.roll(arr[:,0], shift=sh)\n    return arr\n\narr = g(arr)"}
{"question_id": 156, "response": "def g(arr, headers):\n    return arr, [h + 'X' for h in headers]\n\narray, column_names = g(array.copy(), column_names)"}
{"question_id": 157, "response": "def g(array, headers):\n    return array, ['X' + header for header in headers]\n\narray, headers = g(array.copy(), headers)"}
{"question_id": 158, "response": "def g(array, headers):\n    new_headers = []\n    for header in headers:\n        if not header.endswith('X'):\n            new_headers.append('X' + header + 'X')\n        else:\n            new_headers.append('X' + header)\n    return array, new_headers\n\narray, headers = g(array, headers)"}
{"question_id": 159, "response": "unique_groups = np.unique(data['group'])\nresult_list = []\n\nfor group in unique_groups:\n    group_mask = data['group'] == group\n    group_data = data[group_mask]\n    \n    result_row = (\n        group,\n        group_data['group_color'][0],\n        np.mean(group_data['val1']),\n        np.mean(group_data['val2']),\n        np.mean(group_data['val3'])\n    )\n    result_list.append(result_row)\n\nresult = np.array(result_list, dtype=dtype)"}
{"question_id": 160, "response": "def g(data):\n    unique_groups = np.unique(data['group'])\n    result_list = []\n    \n    for group in unique_groups:\n        mask = data['group'] == group\n        group_data = data[mask]\n        \n        result_row = (\n            group,\n            group_data['group_color'][0],\n            np.sum(group_data['val1']),\n            np.sum(group_data['val2']),\n            np.sum(group_data['val3'])\n        )\n        result_list.append(result_row)\n    \n    return np.array(result_list, dtype=dtype)\n\nresult = g(data)"}
{"question_id": 161, "response": "def g(arr):\n    return np.sum(arr.astype(str) == 'null', axis=0)\n\nresult = g(data.copy())"}
{"question_id": 162, "response": "def g(arr):\n    s = ''\n    columns = ['id', 'temp', 'name']\n    for i, c in enumerate(columns):\n        s += \"---- %s ---\\n\" % c\n        unique, counts = np.unique(arr[:, i], return_counts=True)\n        for u, count in zip(unique, counts):\n            s += f\"{u}    {count}\\n\"\n    return s\n\nresult = g(arr.copy())"}
{"question_id": 163, "response": "def justify(a, invalid_val=0, axis=1, side='left'):\n    if invalid_val is np.nan:\n        mask = ~np.isnan(a)\n    else:\n        mask = a!=invalid_val\n    justified_mask = np.sort(mask,axis=axis)\n    if (side=='up') | (side=='left'):\n        justified_mask = np.flip(justified_mask,axis=axis)\n    out = np.full(a.shape, invalid_val)\n    if axis==1:\n        out[justified_mask] = a[mask]\n    else:\n        out.T[justified_mask.T] = a.T[mask.T]\n    return out\n\nresult = justify(arr, invalid_val=np.nan, axis=1, side='left')"}
{"question_id": 164, "response": "def justify(a, invalid_val=0, axis=1, side='left'):\n    if invalid_val is np.nan:\n        mask = ~np.isnan(a)\n    else:\n        mask = a!=invalid_val\n    justified_mask = np.sort(mask,axis=axis)\n    if (side=='up') | (side=='left'):\n        justified_mask = np.flip(justified_mask,axis=axis)\n    out = np.full(a.shape, invalid_val)\n    if axis==1:\n        out[justified_mask] = a[mask]\n    else:\n        out.T[justified_mask.T] = a.T[mask.T]\n    return out\n\nresult = justify(arr, invalid_val=np.nan, axis=0, side='down')"}
{"question_id": 165, "response": "mask = values >= thresh\nfiltered_values = values[mask]\nfiltered_labels = labels[mask]\n\nsum_below_thresh = values[~mask].sum()\nresult_values = np.append(filtered_values, sum_below_thresh)\nresult_labels = np.append(filtered_labels, 'X')"}
{"question_id": 166, "response": "mask = values <= thresh\nabove_thresh = values[~mask]\nabove_thresh_mean = np.mean(above_thresh)\nresult_values = np.append(values[mask], above_thresh_mean)\nresult_labels = np.append(labels[mask], 'X')"}
{"question_id": 167, "response": "def g(data, section_left, section_right):\n    values = data[:, 1].astype(float)\n    mask = (values >= section_left) & (values <= section_right)\n    filtered = data[mask]\n    outside_mean = np.mean(values[~mask])\n    return np.vstack((filtered, np.array(['X', outside_mean], dtype=object)))\n\nresult = g(data, section_left, section_right)"}
{"question_id": 168, "response": "result = np.hstack((arr, np.exp(arr)))"}
{"question_id": 169, "response": "result = np.hstack((arr, np.where(arr != 0, 1/arr, 0)))"}
{"question_id": 170, "response": "def g(arr):\n    sigmoid = 1/(1 + np.exp(-arr))\n    return np.hstack((arr, sigmoid))\n\nresult = g(arr.copy())"}
{"question_id": 171, "response": "def g(a, idx):\n    min_vals = a.min(axis=0)\n    min_mask = (a == min_vals)\n    cumsum_mask = min_mask.cumsum(axis=0).astype(bool)\n    masked_array = np.ma.array(a, mask=cumsum_mask)\n    flipped = masked_array[::-1]\n    max_indices = np.argmax(~flipped.mask, axis=0)\n    return idx[-(max_indices + 1)]\n\nresult = g(a, idx)"}
{"question_id": 172, "response": "def g(a):\n    min_vals = a.min(axis=0)\n    is_min = a == min_vals\n    cumsum = is_min.cumsum(axis=0)\n    mask = ~cumsum.astype(bool)\n    masked = np.ma.array(np.arange(len(a))[:, np.newaxis].repeat(3, axis=1), mask=mask)\n    return np.ma.max(masked, axis=0)\n\nresult = g(a.copy())"}
{"question_id": 173, "response": "def g(data):\n    users = np.unique(data['user'])\n    dates = np.array([np.datetime64(d) for d in data['dt']])\n    min_date = np.min(dates)\n    max_date = np.max(dates)\n    all_dates = np.arange(min_date, max_date + np.timedelta64(1, 'D'), dtype='datetime64[D]')\n    \n    result_dtype = [('dt', 'datetime64[D]'), ('user', 'U1'), ('val', 'i4')]\n    result = np.zeros(len(all_dates) * len(users), dtype=result_dtype)\n    \n    idx = 0\n    for user in users:\n        for date in all_dates:\n            mask = (data['user'] == user) & (dates == date)\n            val = data['val'][mask][0] if np.any(mask) else 0\n            result[idx] = (date, user, val)\n            idx += 1\n    \n    return result\n\nresult = g(data)"}
{"question_id": 174, "response": "def g(data):\n    users = np.unique(data['user'])\n    dates = data['dt']\n    min_date = np.min(dates)\n    max_date = np.max(dates)\n    date_range = [min_date + timedelta(days=x) for x in range((max_date - min_date).days + 1)]\n    \n    result_array = []\n    for date in date_range:\n        for user in users:\n            mask = (data['dt'] == date) & (data['user'] == user)\n            if np.any(mask):\n                val = data['val'][mask][0]\n            else:\n                user_mask = data['user'] == user\n                val = np.max(data['val'][user_mask])\n            result_array.append((date, user, val))\n    \n    return np.array(result_array, dtype=[('dt', 'O'), ('user', 'U1'), ('val', 'i4')])\n\nresult = g(data)"}
{"question_id": 175, "response": "def g(arr):\n    F = {}\n    cnt = 0\n    for i in range(len(arr)):\n        if arr[i,0] not in F.keys():\n            cnt += 1\n            F[arr[i,0]] = cnt\n        arr[i,0] = F[arr[i,0]]\n    return arr\n\nresult = g(arr.copy())"}
{"question_id": 176, "response": "def g(arr):\n    F = {}\n    cnt = 0\n    for i in range(len(arr)):\n        val = arr[i, 1]\n        if val not in F:\n            cnt += 1\n            F[val] = cnt\n        arr[i, 1] = F[val]\n    return arr\n\nresult = g(arr.copy())"}
{"question_id": 177, "response": "def f(arr=example_array):\n    F = {}\n    cnt = 0\n    for i in range(len(arr)):\n        if arr[i,0] not in F.keys():\n            cnt += 1\n            F[arr[i,0]] = cnt\n        arr[i,0] = F[arr[i,0]]\n    result = arr\n    return result"}
{"question_id": 178, "response": "result = np.zeros((6,), dtype=[('user', 'U2'), ('date', 'U8'), ('value', 'i4'), ('someBool', 'bool')])\nresult['user'] = np.repeat(users, 2)\nresult['date'] = np.tile(dates, 3)\nresult['value'] = values.flatten()\nresult['someBool'] = np.repeat(some_bool, 2)"}
{"question_id": 179, "response": "# Create arrays for each column\nusers = np.repeat(df['user'], 2)\ndate_01_12_15_values = np.repeat(df['01/12/15'], 2)\nothers = np.tile(['02/12/15', 'someBool'], len(df))\nvalues = np.column_stack((df['02/12/15'], df['someBool'])).ravel()\n\n# Create structured array\ndtype = [('user', 'U10'), ('01/12/15', 'i4'), ('others', 'U10'), ('value', 'O')]\ndf = np.array(list(zip(users, date_01_12_15_values, others, values)), dtype=dtype)"}
{"question_id": 180, "response": "def g(arr, columns):\n    mask = arr[:, 2] > 0.5\n    return arr[mask][:, columns]\n\nresult = g(arr.copy(), columns)"}
{"question_id": 181, "response": "result = arr[arr[:,2]>0.45][:,columns]"}
{"question_id": 182, "response": "def f(arr, columns=[1, 4]):\n    mask = arr[:, 2] > 0.5\n    filtered = arr[mask]\n    selected = filtered[:, columns]\n    sums = np.sum(selected, axis=1)\n    result = np.column_stack((selected, sums))\n    return result"}
{"question_id": 183, "response": "def g(arr):\n    indices = np.arange(len(arr)) // 4\n    unique_indices = np.unique(indices)\n    return np.array([arr[indices == i].sum() for i in unique_indices])\n\nresult = g(arr.copy())"}
{"question_id": 184, "response": "def g(arr):\n    n = len(arr)\n    group_size = 3\n    padding = (-n % group_size)\n    groups = (np.arange(n) + padding) // group_size\n    unique_groups = np.unique(groups)\n    return np.array([arr[groups == i].mean() for i in unique_groups])\n\nresult = g(arr.copy())"}
{"question_id": 185, "response": "def g(arr):\n    l = np.zeros(2*(len(arr) // 5) + (len(arr) % 5) // 3 + 1)\n    for i in range(len(arr)):\n        idx = 2*(i // 5) + (i % 5) // 3\n        if i % 5 < 3:\n            l[idx] += arr[i]\n        elif i % 5 == 3:\n            l[idx] = arr[i]\n        else:\n            l[idx] = (l[idx] + arr[i]) / 2\n    return l\n\nresult = g(arr)"}
{"question_id": 186, "response": "def g(arr):\n    l = np.zeros(2*(len(arr) // 5) + (len(arr) % 5) // 3 + 1)\n    for i in reversed(range(len(arr))):\n        idx = 2*((len(arr)-1-i) // 5) + ((len(arr)-1-i) % 5) // 3\n        if (len(arr)-1-i) % 5 < 3:\n            l[idx] += arr[i]\n        elif (len(arr)-1-i) % 5 == 3:\n            l[idx] = arr[i]\n        else:\n            l[idx] = (l[idx] + arr[i]) / 2\n    return l\n\nresult = g(arr)"}
{"question_id": 187, "response": "def g(arr):\n    mask = arr == 0\n    idx = np.where(~mask)[0]\n    idx = np.append(idx, len(arr))\n    for start, end in zip(idx[:-1], idx[1:]):\n        arr[start+1:end] = arr[start]\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 188, "response": "def g(arr):\n    time_number = np.array([s[0].strip().split() if ' ' in s[0] else [s[0][:-1], s[0][-1]] for s in arr])\n    time = time_number[:, 0].reshape(-1, 1)\n    number = time_number[:, 1].reshape(-1, 1)\n    time_days = np.where(time == 'year', 365,\n                np.where(time == 'month', 30,\n                np.where(time == 'week', 7,\n                np.where(time == 'day', 1, 0)))).reshape(-1, 1)\n    return np.hstack([arr, time, number, time_days])\n\narr = g(arr)"}
{"question_id": 189, "response": "def g(df1, df2, columns_check_list):\n    mask = np.any(df1[:, columns_check_list] != df2[:, columns_check_list], axis=1)\n    return mask\n\nresult = g(df1, df2, columns_check_list)"}
{"question_id": 190, "response": "def g(arr1, arr2, columns_check_list):\n    mask = (arr1[:, columns_check_list] == arr2[:, columns_check_list]).any(axis=1)\n    return mask\n\nresult = g(arr1, arr2, columns_check_list)"}
{"question_id": 191, "response": "# Extract headers and data\nheaders = data[0]\nvalues = data[1:]\n\n# Get unique countries and years\ncountries = np.unique(values[:, 0])\nyears = headers[2:]\n\n# Initialize result array\nresult = []\n\n# Create header row\nresult.append(['year', 'Country', 'var1', 'var2'])\n\n# Reshape and reorganize data\nfor year in years[::-1]:\n    year_idx = np.where(headers == year)[0][0]\n    for country in countries:\n        country_mask = values[:, 0] == country\n        var1_val = values[country_mask & (values[:, 1] == 'var1'), year_idx][0]\n        var2_val = values[country_mask & (values[:, 1] == 'var2'), year_idx][0]\n        result.append([year, country, var1_val, var2_val])\n\nreshaped_data = np.array(result)"}
{"question_id": 192, "response": "mask = np.all(np.abs(values) < 1, axis=1)\nfiltered_values = np.column_stack((names[mask], details[mask], values[mask]))"}
{"question_id": 193, "response": "# Convert value columns to float for numerical operations\nnumeric_data = data[:, value_indices].astype(float)\n\n# Create mask where absolute values > 1\nmask = np.abs(numeric_data) > 1\nrow_mask = mask.any(axis=1)\n\n# Apply mask to get filtered data\nfiltered_data = data[row_mask]"}
{"question_id": 194, "response": "def g(arr):\n    for i in range(arr.shape[0]):\n        for j in range(arr.shape[1]):\n            if isinstance(arr[i,j], str):\n                if '&AMP;' in arr[i,j]:\n                    arr[i,j] = arr[i,j].replace('&AMP;', '&')\n                    arr[i,j] = arr[i,j] + ' = ' + str(eval(arr[i,j]))\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 195, "response": "def g(name_array):\n    first_names = np.array([])\n    last_names = np.array([])\n    \n    for name in name_array:\n        parts = name.split()\n        if len(parts) == 2:\n            first_names = np.append(first_names, parts[0])\n            last_names = np.append(last_names, parts[1])\n        else:\n            first_names = np.append(first_names, name)\n            last_names = np.append(last_names, '')\n            \n    return np.column_stack((first_names, last_names))\n\nresult_array = g(name_array)"}
{"question_id": 196, "response": "def g(name_array):\n    names_split = np.array([name.split() for name in name_array])\n    mask = np.array([len(name) == 2 for name in names_split])\n    \n    first_names = np.empty(len(name_array), dtype=object)\n    last_names = np.empty(len(name_array), dtype=object)\n    \n    first_names[mask] = [name[0] for name in names_split[mask]]\n    last_names[mask] = [name[1] for name in names_split[mask]]\n    first_names[~mask] = name_array[~mask]\n    \n    result_array = np.column_stack((first_names, last_names))\n    return result_array\n\nresult_array = g(name_array)"}
{"question_id": 197, "response": "arr = arr[~np.char.isdigit(arr[:, 1].astype(str)), 1]"}
{"question_id": 198, "response": "arr = arr[np.char.isdigit(arr.astype(str))]"}
{"question_id": 199, "response": "result = arr[~np.char.isdigit(arr.astype(str))]\n\nreturn result"}
{"question_id": 200, "response": "def g(arr):\n    numeric_data = arr[:, 1:].astype(float)\n    row_sums = numeric_data.sum(axis=1, keepdims=True)\n    normalized = numeric_data / row_sums\n    return np.column_stack((arr[:, 0], normalized))\n\narr = g(arr)"}
{"question_id": 201, "response": "keywords = np.vstack((keywords_0, keywords_1, keywords_2, keywords_3)).T\nkeywords_all = np.array([''.join([str(x) for x in row if pd.notna(x)])[::-1] for row in keywords])"}
{"question_id": 202, "response": "def g(arr):\n    np.random.seed(0)\n    l = int(0.2 * len(arr))\n    indices = np.random.choice(len(arr), l, replace=False)\n    arr[indices, 2] = 0\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 203, "response": "def g(arr):\n    np.random.seed(0)\n    l = int(0.2 * len(arr))\n    indices = np.random.choice(len(arr), l, replace=False)\n    arr[indices, 1] = 0\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 204, "response": "def g(arr):\n    for i in range(len(arr)):\n        tot = 0\n        if i != 0:\n            if arr[i,0] == arr[i-1,0]:\n                continue\n        for j in range(len(arr)):\n            if arr[i,0] == arr[j,0]:\n                tot += 1\n        l = int(0.2*tot)\n        rng = np.random.RandomState(0)\n        indices = rng.choice(range(i,i+tot), l, replace=False)\n        arr[indices,2] = 0\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 205, "response": "def g(arr):\n    _, idx, counts = np.unique(arr, axis=0, return_index=True, return_counts=True)\n    mask = np.zeros(len(arr), dtype=bool)\n    for i in range(len(idx)):\n        if counts[i] > 1:\n            first = True\n            for j in range(len(arr)):\n                if np.array_equal(arr[j], arr[idx[i]]):\n                    if first:\n                        first = False\n                    else:\n                        mask[j] = True\n    return arr[mask]\n\nresult = g(arr)"}
{"question_id": 206, "response": "def g(arr):\n    n = len(arr)\n    index_original = np.arange(n)\n    unique_rows, counts = np.unique(arr, axis=0, return_counts=True)\n    \n    for i in range(n-1, -1, -1):\n        row = arr[i]\n        mask = (arr == row).all(axis=1)\n        max_idx = np.max(np.where(mask)[0])\n        if i <= max_idx:\n            continue\n        if max_idx == index_original[max_idx]:\n            index_original[max_idx] = i\n        index_original[i] = index_original[max_idx]\n    \n    duplicates = []\n    for i in range(n):\n        row = arr[i]\n        mask = (arr == row).all(axis=1)\n        if np.sum(mask) > 1 and i == np.max(np.where(mask)[0]):\n            duplicates.append(i)\n    \n    return arr[duplicates]\n\nresult = g(arr)"}
{"question_id": 207, "response": "def g(arr):\n    col_indices = [1, 2]\n    unique_rows = np.unique(arr[:, col_indices], axis=0, return_index=True, return_counts=True)\n    duplicate_mask = unique_rows[2] > 1\n    duplicate_values = unique_rows[0][duplicate_mask]\n    result_indices = []\n    for row in duplicate_values:\n        matches = np.all(arr[:, col_indices] == row, axis=1)\n        matching_indices = np.where(matches)[0]\n        result_indices.extend(matching_indices[1:])\n    return arr[sorted(result_indices)]\n\nresult = g(arr.copy())"}
{"question_id": 208, "response": "def g(arr):\n    col_indices = [1, 2]\n    n = len(arr)\n    index_original = np.zeros(n, dtype=int)\n    \n    for i in range(n):\n        mask = np.all(arr[:, col_indices] == arr[i, col_indices], axis=1)\n        group_indices = np.where(mask)[0]\n        index_original[i] = group_indices[np.argmax(arr[group_indices, 0])]\n    \n    for i in range(n-1, -1, -1):\n        origin = index_original[i]\n        if i <= origin:\n            continue\n        if origin == index_original[origin]:\n            index_original[origin] = i\n        index_original[i] = index_original[origin]\n    \n    unique_rows = np.unique(arr[:, col_indices], axis=0)\n    duplicates = []\n    \n    for row in unique_rows:\n        mask = np.all(arr[:, col_indices] == row, axis=1)\n        indices = np.where(mask)[0]\n        if len(indices) > 1:\n            duplicates.append(indices[-1])\n    \n    return arr[duplicates]\n\nresult = g(arr.copy())"}
{"question_id": 209, "response": "def g(data):\n    unique_groups = np.unique(data[['Sp', 'Value']])\n    max_counts = np.array([np.max(data['count'][\n        (data['Sp'] == group[0]) & \n        (data['Value'] == group[1])\n    ]) for group in unique_groups])\n    \n    mask = np.zeros(len(data), dtype=bool)\n    for i, group in enumerate(unique_groups):\n        group_mask = (data['Sp'] == group[0]) & (data['Value'] == group[1])\n        mask |= group_mask & (data['count'] == max_counts[i])\n    \n    return data[mask]\n\nresult = g(data)"}
{"question_id": 210, "response": "mask = np.isin(categories, filter_list)\nresult = np.column_stack((categories[mask], indices[mask]))"}
{"question_id": 211, "response": "mask = ~np.isin(categories, filter_list)\nresult = np.column_stack((indices[mask], categories[mask]))"}
{"question_id": 212, "response": "def g(data):\n    n_rows = len(data)\n    n_cols = len(data.dtype.names)\n    \n    result_dtype = [('variable_0', 'U1'), ('variable_1', 'U1'), ('value', 'O')]\n    result = np.zeros(n_rows * n_cols, dtype=result_dtype)\n    \n    for i in range(n_rows):\n        for j in range(n_cols):\n            idx = i * n_cols + j\n            result[idx]['variable_0'] = 'A'\n            result[idx]['variable_1'] = ['B', 'B', 'C', 'C', 'D', 'D'][j]\n            result[idx]['value'] = data[i][j]\n    \n    return result\n\nresult = g(data)"}
{"question_id": 213, "response": "def g(id_arr, val_arr, stuff_arr):\n    unique_ids = np.unique(id_arr)\n    cumsum_arr = np.zeros_like(val_arr, dtype=float)\n    \n    for id_val in unique_ids:\n        mask = id_arr == id_val\n        cumsum_arr[mask] = np.cumsum(val_arr[mask])\n    \n    result = np.column_stack((id_arr, val_arr, stuff_arr, cumsum_arr))\n    return result\n\nresult = g(id_arr, val_arr, stuff_arr)"}
{"question_id": 214, "response": "def g(arr):\n    unique_ids = np.unique(arr[:, 0])\n    result = arr.copy()\n    for id_ in unique_ids:\n        mask = arr[:, 0] == id_\n        cumsum = np.cumsum(arr[mask, 1].astype(float))\n        result[mask, 1] = cumsum\n    return result\n\narr = g(arr)"}
{"question_id": 215, "response": "unique_l = np.unique(l)\nresult = np.array([np.nansum(v[l == val]) if not np.all(np.isnan(v[l == val])) else np.nan for val in unique_l])"}
{"question_id": 216, "response": "unique_r = np.unique(r)\nresult = np.array([np.sum(v[r == val]) for val in unique_r])"}
{"question_id": 217, "response": "def get_relation(col1, col2):\n    unique_vals1, counts1 = np.unique(col1, return_counts=True)\n    unique_vals2, counts2 = np.unique(col2, return_counts=True)\n    first_max = np.max(counts1)\n    second_max = np.max(counts2)\n    if first_max == 1:\n        if second_max == 1:\n            return 'one-to-one'\n        else:\n            return 'one-to-many'\n    else:\n        if second_max == 1:\n            return 'many-to-one'\n        else:\n            return 'many-to-many'\n\nn = len(columns)\nresult = np.empty((n, n), dtype=object)\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        result[i, j] = get_relation(columns[i], columns[j])"}
{"question_id": 218, "response": "def get_relation(columns, col1, col2):\n    unique_col1, count_col1 = np.unique(columns[col1], return_counts=True)\n    unique_col2, count_col2 = np.unique(columns[col2], return_counts=True)\n    first_max = np.max(count_col1)\n    second_max = np.max(count_col2)\n    if first_max == 1:\n        if second_max == 1:\n            return 'one-2-one'\n        else:\n            return 'one-2-many'\n    else:\n        if second_max == 1:\n            return 'many-2-one'\n        else:\n            return 'many-2-many'\n\ndef g(columns):\n    col_names = list(columns.keys())\n    result = np.empty((len(col_names), len(col_names)), dtype=object)\n    for i, col_i in enumerate(col_names):\n        for j, col_j in enumerate(col_names):\n            if col_i == col_j:\n                continue\n            result[i, j] = get_relation(columns, col_i, col_j)\n    return result\n\nresult = g(columns)"}
{"question_id": 219, "response": "def g(arr):\n    family = np.where((arr[:, 1] + arr[:, 2]) >= 1, 'Has Family', 'No Family')\n    unique_family = np.unique(family)\n    means = []\n    for f in unique_family:\n        mask = family == f\n        means.append(np.mean(arr[mask, 0]))\n    return dict(zip(unique_family, means))\n\nresult = g(arr)"}
{"question_id": 220, "response": "def g(data):\n    family = np.where((data[:, 0] + data[:, 2]) >= 1, 'Has Family', 'No Family')\n    has_family_mask = family == 'Has Family'\n    no_family_mask = ~has_family_mask\n    has_family_mean = np.mean(data[has_family_mask, 1]) if np.any(has_family_mask) else 0\n    no_family_mean = np.mean(data[no_family_mask, 1]) if np.any(no_family_mask) else 0\n    return pd.Series([has_family_mean, no_family_mean], index=['Has Family', 'No Family'])\n\nresult = g(data)"}
{"question_id": 221, "response": "def g(arr):\n    family = []\n    for i in range(len(arr)):\n        if arr[i,1] == 0 and arr[i,2] == 0:\n            family.append('No Family')\n        elif arr[i,1] == 1 and arr[i,2] == 1:\n            family.append('Has Family')\n        elif arr[i,1] == 0 and arr[i,2] == 1:\n            family.append('New Family')\n        else:\n            family.append('Old Family')\n    \n    unique_family = np.unique(family)\n    means = {}\n    for f in unique_family:\n        mask = np.array(family) == f\n        means[f] = np.mean(arr[mask,0])\n    \n    return means\n\nresult = g(arr)"}
{"question_id": 222, "response": "def g(arr):\n    unique_cokeys = np.unique(arr['cokey'])\n    result_list = []\n    for cokey in unique_cokeys:\n        mask = arr['cokey'] == cokey\n        group = arr[mask]\n        sorted_group = np.sort(group, order='A')\n        result_list.append(sorted_group)\n    return np.concatenate(result_list)\n\nresult = g(arr.copy())"}
{"question_id": 223, "response": "# Sort columns\nsorted_indices = np.argsort([f\"{c[0]}{c[1]}{c[2]}\" for c in columns])\ndata = data[:, sorted_indices]\ncolumns = columns[sorted_indices]"}
{"question_id": 224, "response": "def g(someTuple):\n    return np.column_stack(someTuple)\n\nresult = g(someTuple)"}
{"question_id": 225, "response": "unique_vals = np.unique(data[:, 0])\nmeans = np.array([data[data[:, 0] == val, 1].mean() for val in unique_vals])\nstds = np.array([data[data[:, 0] == val, 1].std() for val in unique_vals])\nresult = np.column_stack((means, stds))"}
{"question_id": 226, "response": "unique_b = np.unique(arr[:, 1])\nmeans = np.array([arr[arr[:, 1] == b, 0].mean() for b in unique_b])\nstds = np.array([arr[arr[:, 1] == b, 0].std() for b in unique_b])\nresult = np.column_stack((means, stds))"}
{"question_id": 227, "response": "def g(arr):\n    softmax = []\n    min_max = []\n    for i in range(len(arr)):\n        Min = np.inf\n        Max = -np.inf\n        exp_Sum = 0\n        for j in range(len(arr)):\n            if arr[i,0] == arr[j,0]:\n                Min = min(Min, arr[j,1])\n                Max = max(Max, arr[j,1])\n                exp_Sum += np.exp(arr[j,1])\n        softmax.append(np.exp(arr[i,1]) / exp_Sum)\n        min_max.append((arr[i,1] - Min) / (Max - Min))\n    return np.column_stack((arr, softmax, min_max))\n\narr = g(arr.copy())"}
{"question_id": 228, "response": "def g(array):\n    row_mask = np.max(array, axis=1) != 2\n    col_mask = np.max(array, axis=0) != 2\n    return array[row_mask][:, col_mask]\n\nresult = g(array.copy())"}
{"question_id": 229, "response": "def g(array):\n    rows = np.max(array, axis=1) == 2\n    cols = np.max(array, axis=0) == 2\n    array[rows] = 0\n    array[:, cols] = 0\n    return array\n\nresult = g(array.copy())"}
{"question_id": 230, "response": "result = s[np.lexsort([s['index'], s['value']])]"}
{"question_id": 231, "response": "sort_indices = np.lexsort((indices, values))\nsorted_indices = indices[sort_indices]\nsorted_values = values[sort_indices]\nresult = np.column_stack((sorted_indices, sorted_values))"}
{"question_id": 232, "response": "def g(arr):\n    mask = np.array([str(x).replace('.', '', 1).isdigit() for x in arr[:, 0]])\n    return arr[mask]\n\nresult = g(arr.copy())"}
{"question_id": 233, "response": "def g(A, B):\n    result = []\n    for i in range(len(A)):\n        if isinstance(A[i], str):\n            result.append(i)\n    return np.vstack((A[result], B[result])).T\n\nresult = g(A, B)"}
{"question_id": 234, "response": "def g(data):\n    unique_groups = np.unique(np.array(list(zip(data['Sp'], data['Value']))))\n    max_counts = np.array([np.max(data['count'][\n        (data['Sp'] == group[0]) & (data['Value'] == group[1])\n    ]) for group in unique_groups])\n    mask = np.zeros(len(data), dtype=bool)\n    for group, max_count in zip(unique_groups, max_counts):\n        mask |= ((data['Sp'] == group[0]) & \n                (data['Value'] == group[1]) & \n                (data['count'] == max_count))\n    return data[mask]\n\nresult = g(data.copy())"}
{"question_id": 235, "response": "array = np.array([[row[0], row[1], dict.get(row[0], np.nan)] for row in array])"}
{"question_id": 236, "response": "def g(dict, arr):\n    for i in range(len(arr)):\n        if arr[i,0] in dict:\n            arr[i,2] = dict[arr[i,0]]\n        else:\n            arr[i,2] = '17/8/1926'\n    return arr\n\narr = g(dict.copy(), arr.copy())"}
{"question_id": 237, "response": "result = array.copy()\nfor i in range(len(array)):\n    if array[i,0] in dict:\n        result[i,2] = dict[array[i,0]]\n    else:\n        result[i,2] = np.nan\nreturn result"}
{"question_id": 238, "response": "def g(data):\n    dates = np.unique(data['Date'])\n    result1 = np.zeros((len(dates), 2), dtype=int)\n    result2 = np.zeros((len(dates), 2), dtype=int)\n    \n    for i, date in enumerate(dates):\n        mask = data['Date'] == date\n        result1[i] = [(data['B'][mask] % 2 == 0).sum(), (data['C'][mask] % 2 == 0).sum()]\n        result2[i] = [(data['B'][mask] % 2 == 1).sum(), (data['C'][mask] % 2 == 1).sum()]\n    \n    return result1, result2\n\nresult1, result2 = g(data)"}
{"question_id": 239, "response": "unique_B = np.unique(B)\nresult_D = np.zeros(len(unique_B))\nresult_E = np.zeros(len(unique_B))\n\nfor i, b in enumerate(unique_B):\n    mask = B == b\n    result_D[i] = np.sum(D[mask])\n    result_E[i] = np.mean(E[mask])\n\nresult = np.column_stack((result_D, result_E))"}
{"question_id": 240, "response": "def g(A, B, C, D, E):\n    unique_B = np.unique(B)\n    D_sums = np.array([np.sum(D[B == b]) for b in unique_B])\n    E_means = np.array([np.mean(E[B == b]) for b in unique_B])\n    return np.column_stack((D_sums, E_means))\n\nresult = g(A, B, C, D, E)"}
{"question_id": 241, "response": "def g(A, B, D, E):\n    unique_B = np.unique(B)\n    result_D = np.zeros(len(unique_B))\n    result_E = np.zeros(len(unique_B))\n    \n    for i, b in enumerate(unique_B):\n        mask = B == b\n        result_D[i] = np.sum(D[mask])\n        result_E[i] = np.mean(E[mask])\n    \n    return np.column_stack((unique_B, result_D, result_E))\n\nresult = g(A, B, D, E)"}
{"question_id": 242, "response": "unique_B = np.unique(B)\nresult = np.zeros((len(unique_B), 2))\nfor i, b in enumerate(unique_B):\n    mask = B == b\n    result[i, 0] = np.max(D[mask])\n    result[i, 1] = np.min(E[mask])"}
{"question_id": 243, "response": "result = np.array([sum(not c.isalpha() for c in s) for s in arr])\nresult = np.where(result == 0, np.nan, result)"}
{"question_id": 244, "response": "arr = np.column_stack((arr, np.array([sum(c.isalpha() for c in s) for s in arr])))"}
{"question_id": 245, "response": "arr = np.array([x.split(' ', 1) for x in arr])"}
{"question_id": 246, "response": "def g(arr):\n    split_arr = np.array([x[0].split(' ', 2) for x in arr])\n    return split_arr\n\narr = g(arr)"}
{"question_id": 247, "response": "def g(arr):\n    for row in range(arr.shape[0]):\n        s = 0\n        cnt = 0\n        for col in range(arr.shape[1]-1, 0, -1):\n            if float(arr[row,col]) != 0:\n                cnt = min(cnt+1, 2)\n                s = (s + float(arr[row,col])) / cnt\n            arr[row,col] = str(s)\n    return arr\n\narray = g(array.copy())"}
{"question_id": 248, "response": "def g(arr):\n    numeric_arr = arr[:, 1:].astype(float)\n    for row in range(arr.shape[0]):\n        s = 0\n        cnt = 0\n        for col in range(numeric_arr.shape[1]-1, -1, -1):\n            if numeric_arr[row, col] != 0:\n                s += numeric_arr[row, col]\n                cnt += 1\n            numeric_arr[row, col] = s / max(cnt, 1)\n    arr[:, 1:] = numeric_arr.astype(str)\n    return arr\n\narray = g(array.copy())"}
{"question_id": 249, "response": "label = np.concatenate(([1], np.diff(close) > 0)).astype(int)"}
{"question_id": 250, "response": "label = np.ones(len(close), dtype=int)\nfor i in range(1, len(close)):\n    if close[i] > close[i-1]:\n        label[i] = 1\n    elif close[i] == close[i-1]:\n        label[i] = 0\n    else:\n        label[i] = -1\ndf = np.column_stack((date_time, close, label))"}
{"question_id": 251, "response": "unique_keys = np.unique(arr[:, 0])\ncounts = np.array([np.sum(arr[arr[:, 0] == k, 1] == 'one') for k in unique_keys])\nresult = np.column_stack((unique_keys, counts))"}
{"question_id": 252, "response": "unique_keys = np.unique(key1)\ncounts = np.array([np.sum([k2.endswith('e') for k2 in key2[key1 == k]]) for k in unique_keys])\nresult = np.column_stack((unique_keys, counts))"}
{"question_id": 253, "response": "def g(dates):\n    return np.max(dates), np.min(dates)\n\nmax_result, min_result = g(dates.copy())"}
{"question_id": 254, "response": "def g(dates):\n    sorted_dates = np.sort(dates)\n    half = len(dates) // 2\n    unique, counts = np.unique(dates, return_counts=True)\n    mode = unique[np.argmax(counts)]\n    return mode, sorted_dates[half]\n\nmode_result, median_result = g(dates)"}
{"question_id": 255, "response": "result = arr[(arr < 99) | (arr > 101)]"}
{"question_id": 256, "response": "def g(arr):\n    unique_items = np.unique(arr[:, 0])\n    min_indices = []\n    for item in unique_items:\n        item_mask = arr[:, 0] == item\n        item_rows = arr[item_mask]\n        min_idx = np.where(item_mask)[0][np.argmin(item_rows[:, 1])]\n        min_indices.append(min_idx)\n    return arr[min_indices]\n\nresult = g(arr.copy())"}
{"question_id": 257, "response": "def f(arr=strs):\n    result = np.array([x.rsplit('_', 1)[0] for x in arr])\n    return result"}
{"question_id": 258, "response": "def g(arr):\n    nan_indices = np.where(np.isnan(arr))[0]\n    total_nan_len = len(nan_indices)\n    first_nan = total_nan_len // 2\n    arr[nan_indices[:first_nan]] = 0\n    arr[nan_indices[first_nan:]] = 1\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 259, "response": "def g(arr):\n    nan_indices = np.where(np.isnan(arr))[0]\n    total_nan_len = len(nan_indices)\n    first_nan = (total_nan_len * 3) // 10\n    middle_nan = (total_nan_len * 3) // 10\n    arr[nan_indices[:first_nan]] = 0\n    arr[nan_indices[first_nan:first_nan + middle_nan]] = 0.5\n    arr[nan_indices[first_nan + middle_nan:]] = 1\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 260, "response": "def g(arr):\n    total_len = len(arr)\n    zero_len = np.sum(arr == 0)\n    nan_indices = np.where(np.isnan(arr))[0]\n    total_nan_len = len(nan_indices)\n    first_nan = (total_len // 2) - zero_len\n    arr[nan_indices[:first_nan]] = 0\n    arr[nan_indices[first_nan:total_nan_len]] = 1\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 261, "response": "result = np.rec.fromarrays((a, b, c)).tolist()"}
{"question_id": 262, "response": "def g(username, views, bins):\n    unique_users = np.unique(username)\n    bin_labels = [f'({bins[i]}, {bins[i+1]}]' for i in range(len(bins)-1)]\n    result = np.zeros((len(unique_users), len(bins)-1))\n    \n    for i, user in enumerate(unique_users):\n        user_mask = username == user\n        user_views = views[user_mask]\n        hist, _ = np.histogram(user_views, bins=bins)\n        result[i] = hist\n    \n    return result\n\nresult = g(username, views, bins)"}
{"question_id": 263, "response": "result = np.array([', '.join(arr[::-1])])"}
{"question_id": 264, "response": "def g(array1, array2):\n    id_city_district = array1[:, [0,1,2]]\n    merged = []\n    for row in array2:\n        match = None\n        for ref in id_city_district:\n            if row[0] == ref[0]:\n                match = ref\n                break\n        if match is not None:\n            merged.append([row[0], match[1], match[2], row[1], row[2]])\n        else:\n            merged.append([row[0], None, None, row[1], row[2]])\n    merged = np.array(merged, dtype=object)\n    result = np.vstack((array1, merged))\n    return result\n\nresult = g(array1.copy(), array2.copy())"}
{"question_id": 265, "response": "def g(array1, array2):\n    ids1 = array1[:, 0]\n    ids2 = array2[:, 0]\n    \n    merged = []\n    for i, id2 in enumerate(ids2):\n        match = np.where(ids1 == id2)[0]\n        if len(match) > 0:\n            idx = match[0]\n            row = np.array([id2, array1[idx, 1], array1[idx, 2], array2[i, 1], array2[i, 2]], dtype=object)\n        else:\n            row = np.array([id2, None, None, array2[i, 1], array2[i, 2]], dtype=object)\n        merged.append(row)\n    \n    merged = np.array(merged)\n    combined = np.vstack([array1, merged])\n    \n    sort_idx = np.lexsort((combined[:, 3], combined[:, 0].astype(float)))\n    result = combined[sort_idx]\n    \n    return result\n\nresult = g(array1.copy(), array2.copy())"}
{"question_id": 266, "response": "def g(C, D):\n    combined = np.vstack((C, D))\n    _, unique_indices = np.unique(combined[:, 0], return_index=True)\n    unique_indices = np.setdiff1d(np.arange(len(combined)), unique_indices)\n    filtered = combined[unique_indices]\n    sorted_indices = np.argsort(filtered[:, 0])\n    return filtered[sorted_indices]\n\nresult = g(C.copy(), D.copy())"}
{"question_id": 267, "response": "def g(C, D):\n    combined = np.vstack((C, D))\n    _, unique_indices = np.unique(combined[:, 0], return_index=True)\n    unique_data = combined[unique_indices]\n    sorted_indices = np.argsort(unique_data[:, 0])\n    return unique_data[sorted_indices]\n\nresult = g(C.copy(), D.copy())"}
{"question_id": 268, "response": "def g(C, D):\n    combined = np.vstack([C, D])\n    _, unique_indices = np.unique(combined[:, 0], return_index=True)\n    unique_indices = np.setdiff1d(np.arange(len(combined)), unique_indices)\n    df = combined[unique_indices]\n    df = df[np.argsort(df[:, 0])]\n    \n    duplicated = np.zeros(len(df), dtype=bool)\n    for i in range(len(C)):\n        if df[i, 0] in D[:, 0]:\n            duplicated[i] = True\n    \n    result = np.column_stack([df, duplicated])\n    return result\n\nresult = g(C.copy(), D.copy())"}
{"question_id": 269, "response": "result = {user: data[data['user'] == user][['time', 'amount']].tolist() for user in np.unique(data['user'])}"}
{"question_id": 270, "response": "def g(data):\n    users = np.unique(data['user'])\n    result_list = []\n    for user in users:\n        mask = data['user'] == user\n        user_data = data[mask]\n        values = [(t, a) for t, a in zip(user_data['time'], user_data['amount'])]\n        result_list.append((user, values))\n    dtype = [('user', 'i4'), ('amount-time-tuple', 'O')]\n    return np.array(result_list, dtype=dtype)\n\nresult = g(data)"}
{"question_id": 271, "response": "def g(data):\n    users = np.unique(data['user'])\n    result_list = []\n    for user in users:\n        mask = data['user'] == user\n        user_data = data[mask]\n        time_amount = [(t, a) for t, a in zip(user_data['time'], user_data['amount'])][::-1]\n        result_list.append((user, time_amount))\n    dtype = [('user', 'i4'), ('amount-time-tuple', 'O')]\n    return np.array(result_list, dtype=dtype)\n\nresult = g(data)"}
{"question_id": 272, "response": "names = np.array(['file1', 'file2', 'file3'])\ndtype = [('name', 'U10'), ('0', 'i4'), ('1', 'i4'), ('2', 'i4'), ('3', 'i4')]\nstructured_array = np.empty(len(arrays), dtype=dtype)\nstructured_array['name'] = names\nstructured_array['0'] = arrays[:,0]\nstructured_array['1'] = arrays[:,1]\nstructured_array['2'] = arrays[:,2]\nstructured_array['3'] = arrays[:,3]"}
{"question_id": 273, "response": "result = [name for name in names if s in name and name != s]"}
{"question_id": 274, "response": "def g(arr):\n    return np.sum(arr, axis=0)\n\nresult = g(arr.copy())"}
{"question_id": 275, "response": "def g(arr):\n    L = arr.sum(axis=0)\n    L = map(lambda x: str(x), L)\n    return ','.join(L)\n\nresult = g(arr.copy())"}
{"question_id": 276, "response": "def g(ids, times):\n    # Convert times to datetime objects\n    dt_times = np.array([datetime.strptime(t, '%Y-%m-%d %H:%M:%S') for t in times])\n    \n    # Format times to required string format\n    formatted_times = np.array([t.strftime('%d-%b-%Y %a %T') for t in dt_times])\n    \n    # Calculate ranks for each group\n    ranks = np.zeros(len(ids))\n    unique_ids = np.unique(ids)\n    \n    for id_ in unique_ids:\n        mask = ids == id_\n        group_times = dt_times[mask]\n        group_ranks = len(group_times) - np.argsort(np.argsort(group_times)) \n        ranks[mask] = group_ranks\n    \n    # Combine results\n    result = np.column_stack((ids, formatted_times, ranks))\n    return result\n\nresult = g(ids, times)"}
{"question_id": 277, "response": "result = arr[filt[arr[:, 0].astype(int) - 1]]"}
{"question_id": 278, "response": "def g(data, filt):\n    mask1 = np.isin(data['a'], np.arange(1, 4)[filt])\n    mask2 = np.isin(data['b'], np.arange(1, 4)[filt])\n    return data[mask1 & mask2]\n\nresult = g(data.copy(), filt.copy())"}
{"question_id": 279, "response": "def g(arr):\n    first_row = arr[0]\n    ninth_row = arr[8]\n    mask = ~(np.isnan(first_row) & np.isnan(ninth_row)) & (first_row != ninth_row)\n    return np.arange(arr.shape[1])[mask]\n\nresult = g(array.copy())"}
{"question_id": 280, "response": "def g(array):\n    first_row = array[0]\n    ninth_row = array[8]\n    mask = (first_row == ninth_row) | (np.isnan(first_row) & np.isnan(ninth_row))\n    return np.arange(array.shape[1])[mask]\n\nresult = g(array.copy())"}
{"question_id": 281, "response": "def g(array):\n    first_row = array[0]\n    last_row = array[8]\n    mask = ~(np.isnan(first_row) & np.isnan(last_row)) & (first_row != last_row)\n    return np.where(mask)[0].tolist()\n\nresult = g(array.copy())"}
{"question_id": 282, "response": "def g(array):\n    first_row = array[0]\n    ninth_row = array[8]\n    mask = ~(np.isnan(first_row) & np.isnan(ninth_row)) & (first_row != ninth_row)\n    indices = np.where(mask)[0]\n    result = [(array[0,i], array[8,i]) for i in indices]\n    return result\n\nresult = g(array.copy())"}
{"question_id": 283, "response": "arr = arr.flatten().reshape(1, -1)"}
{"question_id": 284, "response": "arr = np.where(~np.isnan(arr[:, 0]), np.round(arr[:, 0], 2), arr[:, 0])\narr = np.column_stack((arr, arr[:, 1]))"}
{"question_id": 285, "response": "def g(arr):\n    mask = ~np.isnan(arr).any(axis=1)\n    arr[mask] = np.round(arr[mask], 2)\n    return arr\n\narr = g(arr.copy())"}
{"question_id": 286, "response": "def g(arr, list_of_my_columns):\n    selected = arr[:, list_of_my_columns]\n    avg = np.mean(selected, axis=1)\n    min_val = np.min(selected, axis=1)\n    max_val = np.max(selected, axis=1)\n    median = np.median(selected, axis=1)\n    return np.column_stack((arr, avg, min_val, max_val, median))\n\narr = g(data.copy(), list_of_my_columns)"}
{"question_id": 287, "response": "result = arr[np.argsort(arr['time'])]"}
{"question_id": 288, "response": "result = np.sort(structured_array, order='VIM')"}
{"question_id": 289, "response": "def g(data):\n    to_delete = ['2020-02-17', '2020-02-18']\n    mask = np.array([date[:10] not in to_delete for date in data['Date']])\n    return data[mask]\n\nresult = g(data)"}
{"question_id": 290, "response": "def g(data, dates):\n    to_delete = ['2020-02-17', '2020-02-18']\n    mask = ~np.isin(np.array([d.strftime('%Y-%m-%d') for d in dates]), to_delete)\n    filtered_data = data[mask]\n    filtered_dates = dates[mask]\n    new_dates = np.array([d.strftime('%d-%b-%Y %A') for d in filtered_dates])\n    result = np.array([(new_dates[i],) + tuple(filtered_data[i])[1:] for i in range(len(filtered_data))],\n                      dtype=filtered_data.dtype)\n    return result\n\nresult = g(data, dates)"}
{"question_id": 291, "response": "def g(corr):\n    mask = ~np.tril(np.ones_like(corr)).astype(bool)\n    corr_triu = corr * mask\n    rows, cols = np.where(mask)\n    values = corr_triu[rows, cols]\n    filtered_indices = np.where(values > 0.3)\n    result_rows = rows[filtered_indices]\n    result_cols = cols[filtered_indices]\n    result_values = values[filtered_indices]\n    return np.column_stack((result_rows, result_cols, result_values))\n\nresult = g(corr.copy())"}
{"question_id": 292, "response": "def g(corr):\n    mask = ~np.tril(np.ones_like(corr)).astype(bool)\n    upper_tri = corr[mask]\n    return upper_tri[upper_tri > 0.3]\n\nresult = g(corr.copy())"}
{"question_id": 293, "response": "def g(arr, headers):\n    new_headers = np.concatenate([headers[:-1], np.array(['Test'])])\n    return arr, new_headers\n\nresult = g(arr.copy(), headers.copy())"}
{"question_id": 294, "response": "headers = np.array(['Test', headers[1], headers[2]])\nresult = np.vstack((headers, arr))"}
{"question_id": 295, "response": "def g(arr):\n    modes = np.zeros(arr.shape[0])\n    counts = np.zeros(arr.shape[0])\n    \n    for i in range(arr.shape[0]):\n        unique, counts_arr = np.unique(arr[i], return_counts=True)\n        max_count_idx = np.argmax(counts_arr)\n        modes[i] = unique[max_count_idx]\n        counts[i] = np.sum(arr[i] == unique[max_count_idx]) - 1\n    \n    return np.column_stack((arr, modes, counts))\n\narr = g(arr)"}
{"question_id": 296, "response": "def g(arr):\n    modes = np.zeros(arr.shape[0])\n    counts = np.zeros(arr.shape[0])\n    \n    for i in range(arr.shape[0]):\n        unique, counts_arr = np.unique(arr[i], return_counts=True)\n        max_count_idx = np.argmax(counts_arr)\n        modes[i] = unique[max_count_idx]\n        counts[i] = np.sum(arr[i] == modes[i])\n    \n    return np.column_stack((arr, modes, counts))\n\narr = g(arr)"}
{"question_id": 297, "response": "def find_mode_and_count(arr):\n    result = []\n    for row in arr:\n        unique, counts = np.unique(row, return_counts=True)\n        max_count = np.max(counts)\n        modes = unique[counts == max_count]\n        modes.sort()\n        count = np.sum(row == modes[0])\n        result.append([modes.tolist(), count])\n    return np.array(result, dtype=object)\n\nresult = find_mode_and_count(arr)"}
{"question_id": 298, "response": "def g(arr):\n    arr = arr.astype(object)\n    arr[:, 2] = np.where(arr[:, 2] == 'NULL', '0', arr[:, 2])\n    arr[:, 2] = arr[:, 2].astype(float)\n    \n    unique_ids = np.unique(arr[:, [1,3]], axis=0)\n    result = []\n    \n    for id1, id2 in unique_ids:\n        mask = (arr[:, 1] == id1) & (arr[:, 3] == id2)\n        mean_foo = np.mean(arr[mask, 0].astype(float))\n        mean_bar = np.mean(arr[mask, 2].astype(float))\n        result.append([id1, id2, mean_foo, mean_bar])\n    \n    return np.array(result)\n\nresult = g(arr.copy())"}
{"question_id": 299, "response": "def g(df_a, df_b):\n    result = np.zeros((len(df_a), 3), dtype=object)\n    result[:, 0] = df_a[:, 0]\n    result[:, 1] = df_a[:, 1]\n    for i in range(len(df_a)):\n        mask = df_b[:, 0] == df_a[i, 0]\n        if np.any(mask):\n            result[i, 2] = df_b[mask][0, 1]\n    return result\n\nresult = g(df_a.copy(), df_b.copy())"}
